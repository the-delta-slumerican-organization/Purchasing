@using Newtonsoft.Json
@model Purchasing.Mvc.Controllers.ReportProcessingTimeSummaryViewModel

@{
    ViewBag.Title = "ProcessingTimeSummary";
}

@section AdditionalScripts
{

}



<script src="//code.highcharts.com/4.1/highcharts.js"></script>
<script src="http://code.highcharts.com/modules/heatmap.js"></script>
<script src="http://code.highcharts.com/modules/treemap.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.8.2/underscore-min.js"></script>

<div id="treeChart" style="display: inline-block; width: 49%;"></div>

<div id="container" style="display: inline-block; width: 49%;"></div>
<script>
    $(function() {
        var data = @Html.Raw(JsonConvert.SerializeObject(Model.JsonData));

        var points = [],
        role_p,
        role_val,
        role_i,
        person_p,
        person_i,
        order_p,
        order_i,

        role_i = 0,
        roles = ['approver', 'accountManager', 'purchaser'];

        for (var roleIndex in roles) {
            role_val = 0;
            role_p = {
                id: "id_" + roleIndex,
                name: roles[roleIndex],
                color: Highcharts.getOptions().colors[roleIndex],
                displayName: roles[roleIndex]
            };
            person_i = 0;
            var orders = data[role_p.name];

            var groupedByPerson = _.groupBy(orders, 'personId');

            for (var person in groupedByPerson) {
                var personName = person;

                person_p = {
                    id: role_p.id + "_" + personName,
                    name: personName,
                    parent: role_p.id,
                    displayName: groupedByPerson[person][0].personName
                };
                points.push(person_p);

                var ordersForPerson = groupedByPerson[person];
                for (var orderIndex in ordersForPerson) {
                    order_p = {
                        id: person_p.id + "_" + ordersForPerson[orderIndex].orderId,
                        name: ordersForPerson[orderIndex].orderId,
                        parent: person_p.id,
                        value: Math.round(ordersForPerson[orderIndex].minutes),
                        displayName: ordersForPerson[orderIndex].orderId
                    };

                    if (!order_p.value) {
                        order_p.value = 0;
                    }
                    role_val += order_p.value;
                    points.push(order_p);
                    order_i++;
                }

                person_i++;
            }
            role_p.value = Math.round(role_val / person_i);
            points.push(role_p);
            role_i++;

        }
        console.log(points);

        var chart = new Highcharts.Chart({
            chart: {
                renderTo: 'treeChart'
            },
            tooltip: {
                backgroundColor: '#FCFFC5',
                pointFormatter: function () {
                    var sec_num = parseInt(this.value, 10);
                    var days = Math.floor(sec_num / 1440);
                    var hours   = Math.floor((sec_num - (days*1440) )/ 60);
                    var minutes = Math.floor((sec_num - (days*1440) - (hours * 60)) );

                    if (days < 10) {days = "0"+days;}
                    if (hours   < 10) {hours   = "0"+hours;}
                    if (minutes < 10) {minutes = "0"+minutes;}

                    var time    = days+'d:'+hours+'h:'+minutes+'m';
                    return this.displayName+': '+time;
                },
                shared: true
            },
            series: [{
                type: "treemap",
                layoutAlgorithm: 'squarified',
                allowDrillToNode: true,
                dataLabels: {
                    enabled: false
                },
                levelIsConstant: false,
                levels: [{
                    level: 1,
                    dataLabels: {
                        enabled: true
                    },
                    borderWidth: 3
                }],
                data: points
            }],
            subtitle: {
                text: 'Click points to drill down.'
            },
            credits: {enabled: false},
            title: {
                text: 'Time to Completion By Role and Person'
            }
        });
    });

    $(function () {
        $('#container').highcharts({
            chart: {
                plotBackgroundColor: null,
                plotBorderWidth: null,
                plotShadow: false
            },
            tooltip: {
                pointFormatter: function () {
                    var sec_num = parseInt(this.y, 10);
                    var days = Math.floor(sec_num / 1440);
                    var hours   = Math.floor((sec_num - (days*1440) )/ 60);
                    var minutes = Math.floor((sec_num - (days*1440) - (hours * 60)) );

                    if (days < 10) {days = "0"+days;}
                    if (hours   < 10) {hours   = "0"+hours;}
                    if (minutes < 10) {minutes = "0"+minutes;}

                    var time    = days+'d:'+hours+'h:'+minutes+'m';
                    return time;
                }
            },
            credits: {enabled: false},
            subtitle: {
                text: 'Average total time to completion: @TimeSpan.FromMinutes(Model.Columns.AverageTimeToCompletion.Value).ToString("dd'd:'hh'h:'mm'm'")'
            },
            title: {
                text: 'Average Time to Task Completion By Role'
            },
            plotOptions: {
                pie: {
                    allowPointSelect: true,
                    cursor: 'pointer',
                    dataLabels: {
                        enabled: false
                    },
                    showInLegend: true
                }
            },
            series: [{
                type: 'pie',
                name: '',
                data: [
                    ['Avg Approve', @Model.Columns.AverageTimeToApprover.Value ],
                    ['Avg Account Manager', @Model.Columns.AverageTimeToAccountManagers.Value ],
                    ['Avg Purchase', @Model.Columns.AverageTimeToPurchaser.Value ]
                ]
            }]
        });
    });


</script>

<table class="dt-table no-icon-table">
    <thead>
        <tr>
            <th>View</th>
            <th>
                Date Created
            </th>
            <th>
                Workgroup
            </th>
            <th>Time to Completion</th>
            <th>Time to Approve</th>
            <th>Approve</th>
            <th>Time to Account Manager</th>
            <th>Account Manager</th>
            <th>Time to Purchaser</th>
            <th>Purchaser</th>
            <th>Complete/Status</th>

        </tr>
    </thead>
    <tbody>
        @{ var odd = false; }
        @foreach (var item in Model.Columns.OrderTrackingEntities)
        {
            <tr class="@(odd ? "odd" : "even")">
                <td>
                    <a href='@Url.Action("Review", "Order", new {id=item.OrderId})' class="ui-icon ui-icon-document" title="Review order" target="_blank"></a>
                </td>
                <td>
                    @item.OrderCreated.ToShortDateString()
                </td>
                <td>
                    @item.WorkgroupName
                </td>

                <td>
                    @if (item.MinutesToCompletion != null)
                    {
                        @TimeSpan.FromMinutes(item.MinutesToCompletion.Value).ToString("dd'd:'hh'h:'mm'm'")
                    }
                </td>
                <td>
                    @if (item.MinutesToApprove != null)
                    {
                        @TimeSpan.FromMinutes(item.MinutesToApprove.Value).ToString("dd'd:'hh'h:'mm'm'")
                    }
                </td>
                <td>
                    @item.ApproverName
                </td>
                <td>
                    @if (item.MinutesToAccountManagerComplete != null)
                    {
                        @TimeSpan.FromMinutes(item.MinutesToAccountManagerComplete.Value).ToString("dd'd:'hh'h:'mm'm'")
                    }
                </td>
                <td>
                    @item.AccountManagerName
                </td>
                <td>
                    @if (item.MinutesToPurchaserComplete != null)
                    {
                        @TimeSpan.FromMinutes(item.MinutesToPurchaserComplete.Value).ToString("dd'd:'hh'h:'mm'm'")
                    }
                </td>
                <td>
                    @item.PurchaserName
                </td>
                <td>
                    @item.IsComplete
                    @if (item.StatusCode != "CP")
                    {
                        @item.Status
                    }
                </td>
            </tr>
                    odd = !odd;
        }
    </tbody>
</table>
