@using NPOI.SS.Formula.Functions
@using Purchasing.Core.Domain
@model OrderReceiveModel


@{
    ViewBag.Title ="Receive Items";
    ViewBag.HideEditDialogue = true;
}



@section SubNav
{
    <ul class="navigation">
        <li><a href="@Url.Action("Review", new {id=Model.OrderId})" class="ui-button button ui-state-default">Back to Order</a></li>
    </ul>
}

@section AdditionalStyles
{
    @Styles.Render("~/Css/single/fileuploader/fileuploader")
    @Styles.Render("~/Css/single/receive-payment")

}

@section AdditionalScripts
{
    @Scripts.Render("~/bundles/jquery.tmpl")
    @Scripts.Render("~/bundles/fileuploader.js")
   @Scripts.Render("~/bundles/single/receiveItems")

<script type="text/javascript">

    $(function () {
        purchasing.options({
            ReceiveItemUrl: '@Url.Action("ReceiveItems", "Order", new {id= Model.OrderId})',
            ReceiveNotesUrl: '@Url.Action("ReceiveItemsNotes", "Order", new { id = Model.OrderId })',
            HistoryUrl: '@Url.Action("GetReceiveHistory", "Order", new {id = Model.OrderId})',
            UploadFileUrl: '@Url.Action("UploadFile", "Order", new {orderId = Model.OrderId})',
            UpdateAttachmentCategoryUrl: '@Url.Action("UpdateAttachmentCategory", new {id = Model.OrderId})',
            AttachNoteUrl: '@Url.Action("AddComment", "Order", new {id = Model.OrderId})'
        });

        purchasing.init();
    });

</script>

    
    <script type="text/javascript">
        $(document).ready(function() {
            $("#peepsDialog").dialog({
                autoOpen: false,
                height: 610,
                width: 500,
                modal: true,
                buttons: {
                    "Cancel": function() {
                        $("#peepsUl").empty();
                        $("#peepsLoaderId").hide();
                        $(this).dialog("close");
                    }
                }
            });

            $(".showTip").qtip({
                overwrite: false,
                show: {
                    event: 'mouseenter focus',
                    ready: false
                },
                hide: {
                    event: 'mouseleave blur'
                },
                position: {
                    my: 'bottom center',
                    at: 'top center'
                }
            });
        });

    </script>
}

    @helper UnaccountedAmount(decimal total, decimal? received)
    {
        var rtValue = string.Format("<td ");
        if (received != null)
        {
            var diff = total - received;
            if (diff > 0)
            {
                rtValue = string.Format("{0} class='unaccounted red bold'>({1})</td>", rtValue, string.Format("{0:0.###}", diff));
            }
            else
            {
                rtValue = string.Format("{0} class='unaccounted green bold'>{1}</td>", rtValue, string.Format("{0:0.###}", diff*-1));
            }
        }
        else
        {
            rtValue = string.Format("{0} class='unaccounted red bold'>({1})</td>", rtValue, string.Format("{0:0.###}", total));
        }
        @Html.Raw(rtValue)
    }

<div id="status-message">
    We have made some functional changes to this page. Here is a short video describing the changes: <a href="https://www.youtube.com/watch?v=bAKKMUo6-2E#t=50" target="_blank">https://www.youtube.com/watch?v=bAKKMUo6-2E#t=50</a>.
</div>

    @Html.Partial("_ReviewOrderDetails", Model.ReviewOrderViewModel)


    <section id="line-items" class="ui-corner-all display-form">

        <header class="ui-corner-top ui-widget-header">Line Items</header>
        @if (Model.ReviewOrderViewModel.Order.ApUser != null)
        {
            <div class="section-text">
                <p>Note! This order has been assigned to <strong>@Model.ReviewOrderViewModel.Order.ApUser.FullName</strong> for Accounts Payable. Only they will be able to edit these values.</p>
            </div>
        }

        <div class="section-contents">
        
            @Html.Hidden("id", Model.OrderId)
            @{
                var headerName = "Receive Qty";
                var allButtoneName = "Receive All";
            }
            @{
                var disabled = string.Empty;
                if (Model.Locked == true)
                {
                    disabled = "disabled='disabled'";
                }
            }
        
            @using (Html.BeginForm("ReceiveAll", "Order", new {id = Model.OrderId}, FormMethod.Post))
            {
                @Html.Hidden("id", Model.OrderId)
                <div id="forgery-token">
                    @Html.AntiForgeryToken()
                </div>
                <ul>

                    <li class="apply">
                        <label>&nbsp;</label>
                        <input class="button" type="submit" value="@allButtoneName" @disabled />
                    </li>
                </ul>
            }

            <table class="no-icon-table">
                <thead>
                    <tr>
                        <th></th>
                        <th>@headerName</th>
                        <th>Ordered Qty</th>
                        <th>Outstanding Qty</th>
                        <th>Unit</th>
                        <th>Catalog #</th>
                        <th>Description</th>
                        <th>Commodity</th>
                        <th>Unit $</th>
                        <th>Updated By</th>
                        <th></th>
                        <th>Updated</th>
                        <th>More</th>
                    </tr>
                </thead>
                <tbody>
                    @{
                        var odd = false;
                        var notesLineId = "";
                        var displayNotes = "";
                        var by = new HistoryReceivedLineItem();
                        var count = 0;
                    }
                    @foreach (var item in Model.LineItems.Where(a => a.Quantity != 0))
                    {
                        count++;
                        notesLineId = "notesLineId" + item.Id;

                        displayNotes = (string.IsNullOrWhiteSpace(item.ReceivedNotes)) ? "display: none;" : string.Empty;

                        if (!Model.LastChangedBy.TryGetValue(item.Id, out by))
                        {
                            by = null;
                        }
                        var titleName = "Number of Units received for this line item.";
                        var notes = item.ReceivedNotes;
                        var toggleTittle = "Show/Hide Received Comments";

                        <tr id="@item.Id" class="@(odd ? "odd" : "even")">
                            <td class="lineitem">@count</td>               
                            <td class="receiveLineItemCell">
                                <input class="receiveLineItem showTip" type="number" value="@(item.QuantityReceived!=null ? item.QuantityReceived : 0)" data-id="@item.Id" title="@titleName" @disabled/>
                                <input type="hidden" id="@string.Format("original{0}", item.Id)" data-id="@item.Id" value="@(item.QuantityReceived!=null ? item.QuantityReceived : 0)" />
                                <span class="quantity-loader" style="display: none;">
                                    <img src='@Url.Image("ajax-loader.gif")' />
                                </span>

                            </td>
                            <td>@string.Format("{0:0.###}", item.Quantity)</td>
                            @UnaccountedAmount(item.Quantity, item.QuantityReceived)
                            <td>@item.Unit</td>
                            <td>@(string.IsNullOrWhiteSpace(item.CatalogNumber) ? "n/a" : item.CatalogNumber)</td>
                            <td>@item.Description</td>
                            <td>@(item.Commodity != null ? item.Commodity.Name : "n/a")</td>
                            <td>@item.UnitPrice</td>
                            <td class="user-name">@(by != null ? by.User.FullName : string.Empty)</td>
                            <td>
                                <a class='userDetails showTip ui-icon ui-icon-person' data-id='@item.Id' title='Lookup all the people who have updated this line item.'></a>
                            </td>
                            <td class="update-date">@(by != null ? by.UpdateDate.ToString("MM/dd/yyyy") : string.Empty)</td>
                            <td>
                                <span data-id="@item.Id" class="toggle-line-item-details ui-state-default ui-corner-all ui-state-hover" style="margin: 0px .1em; float: right;">
                                    <a class=" ui-icon ui-icon-comment showTip" title="@toggleTittle"></a>
                                </span>
                            </td>
                        </tr>
                        <tr id="@notesLineId" class="@(odd ? "odd" : "even")" style="@displayNotes">
                            <td colspan="13">
                                <table class="sub-line-item">
                                    <tr>
                                        <td class="label">Notes:</td>
                                        <td>
                                            <textarea class="receiveNotes showTip" data-id="@item.Id" title="<strong>Tip:</strong> Don't put things like serial numbers in here because this can be edited. <br/>Information like that should be added to the comments/notes of the review page." @disabled >@notes</textarea>
                                        </td>
                                        <td>
                                            <span class="notes-loader" style="display: none;">
                                                <img src='@Url.Image("ajax-loader.gif")'/>
                                            </span>
                                            <span class="notes-update-message"></span>
                                        </td>
                                    </tr>
                                </table>
                            </td>
                        </tr>
                        odd = !odd;
                    }
                </tbody>
            </table>

            <ul>
                <li class="apply">
                    <label>&nbsp;</label>
                    <input class="button" id="RecordButton" type="button" value="Record Items" />
                </li>
            </ul>
        </div>


    </section>

    @Html.Partial("_ReceivedItemsHistoryDialog")

    @Html.Partial("_ReviewAttachments", Model.ReviewOrderViewModel)

    @Html.Partial("_ReviewNotes", Model.ReviewOrderViewModel)