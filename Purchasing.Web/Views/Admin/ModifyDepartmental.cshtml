@model Purchasing.Web.Controllers.DepartmentalAdminModel

@{
	ViewBag.Title = "Create Departmental";

}

@section SubNav
{
	<ul class="navigation">
        @if (!string.IsNullOrWhiteSpace(Model.User.Id))
        {
            <li>@Html.ActionLink("Clone User", "Clone", "Admin", new {id = Model.User.Id}, null)</li>
        }
		<li>@Html.ActionLink("Back to List", "Index")</li>
	</ul>
}

@section AdditionalScripts{
    <link rel="stylesheet" type="text/css" href="@Url.Css("jquery.AutoCompleteSelect.css")"/>
    <script type="text/javascript" src="@Url.Script("jquery.AutoCompleteSelect.js")"></script>

    <script type="text/javascript">

        $(function () {
            $("#User_Organizations").autoCompleteSelect({ useRemote: false });
        })

    </script>

        <script type="text/javascript">
        $(document).ready(function() {
            // attach event handlers
            $("#userLookupBtn").click(function() {
                Lookup();
            });
        });


        function Lookup() {
            var userUrl = "@Url.Action("FindUser")";
            var searchTerm = $("#userLookup").val();

            $.getJSON(userUrl, {SearchTerm: searchTerm}, function(results) {
                if(results == undefined) {
                    alert("User Not Found");
                }
                else {
                    $("#FirstName").val(results[0].FirstName);
                    $("#LastName").val(results[0].LastName);
                    $("#Email").val(results[0].Email);
                    $("#Id").val(results[0].id);
                    if(results[0].IsActive == true) {
                        $("#IsActive").prop("checked", true); 
                    }
                    else {
                        $("#IsActive").prop("checked", false); 
                    } 
                }

            } );
        }

   </script>
}


@using (Html.BeginForm("ModifyDepartmental", "Admin")) {
	@Html.AntiForgeryToken()
	@Html.ValidationSummary(true)
<section>
@* Legend is required if you have more than one widget/unit to help the user understand what is being asked of them.
Example: Dinosaur 1  *@
	<header>Create Departmental Admin</header>

    <div class="section-contents">
    
        <div class="section-text">
	        @*<h4>Form Header</h4>*@
	        @*<p>Be specific so the user understands what exactly you are looking for.  Example: After Dinosaur 1 moves out of his/her parents' den what will Dinosaur 1 do?  We need to know his employment plan, feeding area, as well as living situation.  This information will not be sold or given to carnivores.</p>*@
	        <p>All required fields are in <strong>bold</strong> and have a red <span class="required">*</span> next to the field label.</p>        
        </div>

	    <ul>
            <li>
                <div class="editor-label">User Lookup</div>
                <div class="editor-field">
					<input id="userLookup" class="text-box single-line" type="text" placeholder="KerberosID or email"/>
                    <input id="userLookupBtn" type="button" value="Lookup User" class="button ui-button ui-widget ui-state-default ui-corner-all" role="button" aria-disabled="false">
				</div>
            </li>

            @Html.Partial("_UserProperties", Model.User)
@*		    <li>
                <div class="editor-label">
                    @Html.LabelFor(model => model.User.Id)
                </div>
                <div class="editor-field">
                    @Html.EditorFor(model => model.User.Id) @Html.ValidationMessageFor(model => model.User.Id)
                </div>
            </li>
            <li>
                <div class="editor-label">
                    @Html.LabelFor(model => model.User.FirstName)
                </div>
                <div class="editor-field">
                    @Html.EditorFor(model => model.User.FirstName) @Html.ValidationMessageFor(model => model.User.FirstName)
                </div>
            </li>
            <li>
                <div class="editor-label">
                    @Html.LabelFor(model => model.User.LastName)
                </div>
                <div class="editor-field">
                    @Html.EditorFor(model => model.User.LastName) @Html.ValidationMessageFor(model => model.User.LastName)
                </div>
            </li>
            <li>
                <div class="editor-label">
                    @Html.LabelFor(model => model.User.Email)
                </div>
                <div class="editor-field">
                    @Html.EditorFor(model => model.User.Email) @Html.ValidationMessageFor(model => model.User.Email)
                </div>
            </li>
            <li>
                <div class="editor-label">
                    @Html.LabelFor(model => model.User.IsActive)
                </div>
                <div class="editor-field">
                    @Html.EditorFor(model => model.User.IsActive) @Html.ValidationMessageFor(model => model.User.IsActive)
                </div>
            </li>*@

            <li>
                <div class="editor-label">@Html.LabelFor(x=>x.Organizations)</div>
			    <div class="editor-field">
                    @this.MultiSelect("User.Organizations").Options(Model.Organizations, x=>x.Id, x=> string.Format("{0} ({1})", x.Name, x.Id)).Selected(Model.User.Organizations.Select(x=>x.Id))
			    </div>
            </li>

		    <li>
			    @* For the clear and submit buttons an empty label is required. Example: <label>&nbsp;</label> *@
			    <div class="editor-label">&nbsp;</div>
			    <div class="editor-field">
			    <input class="button" type="submit" value="Create" /> | @Html.ActionLink("Cancel", "Index")
			    </div>
		    </li>
	    </ul>

    </div>



</section>
}




