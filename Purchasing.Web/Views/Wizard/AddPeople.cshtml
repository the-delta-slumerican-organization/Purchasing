@using Purchasing.Web.Models
@model WorgroupPeopleCreateModel

@{
    Bundles.Reference("css/single/jquery.multiselector.css");
    Bundles.Reference("scripts/public/single/jquery.multiselector.js");
}

@section AdditionalScripts
{
    <script type="text/javascript">

        $(function () {
        
            var userUrl = "@Url.Action("SearchUsers")";
            
            $("#users").multiSelector({autoComplete: false, dataUrl: userUrl, placeholder: "KerberosID or email", showOptions: true});
           
        })

    </script>

    <style type="text/css">
    
        .selector {margin: 2em 0;}
        .selector h3 {margin-bottom: .5em;}
    
        header.title
        {
            border-top: 1px solid #DDDDDD; 
            border-bottom: 1px solid #DDDDDD; 
            font-size: large; 
            padding: 1em;
        }
    
    </style>
}

@{
    ViewBag.Title = Model.Workgroup.Name;
    ViewBag.StepName = "Add " + Model.Role.Name + "(s)";
    switch ((int)ViewBag.StepNumber)
    {
        case 3 : 
            //On Requestor
            ViewBag.Previous = Url.Action("SubOrganizations", "Wizard", new { id = Model.Workgroup.Id });
            ViewBag.Skip = Url.Action("People", "Wizard", new { id = Model.Workgroup.Id, roleFilter = "RQ" });
            break;
        case 4:
            // On Approver
            ViewBag.Previous = Url.Action("People", "Wizard", new { id = Model.Workgroup.Id, roleFilter = "RQ" });
            ViewBag.Skip = Url.Action("People", "Wizard", new { id = Model.Workgroup.Id, roleFilter = "AP" });
            break;
        case 5:
            //On Account Manager
            ViewBag.Previous = Url.Action("People", "Wizard", new { id = Model.Workgroup.Id, roleFilter = "AP" });
            ViewBag.Skip = Url.Action("People", "Wizard", new { id = Model.Workgroup.Id, roleFilter = "AM" });
            break;
        case 6:
            //On Purchaser
            ViewBag.Previous = Url.Action("People", "Wizard", new { id = Model.Workgroup.Id, roleFilter = "AM" });
            ViewBag.Skip = Url.Action("People", "Wizard", new { id = Model.Workgroup.Id, roleFilter = "PR" });
            break;
    }
    ViewBag.IsAdministrative = Model.Workgroup.Administrative;
    ViewBag.IsAccountSync = Model.Workgroup.SyncAccounts;
}



@Html.Partial("_StatusBar", Model.Workgroup.Id)


@using(Html.BeginForm())
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true)
    @Html.Partial("_Navigation")
    <section>
        <header>Add People</header>

        <div class="section-contents">

        <div class="wizard-instructions" id="wizard-instructions-form">
         @switch ((int)ViewBag.StepNumber)
    {
        case 3 : 
            //On Requestor
            <p>Requestors are users who can place orders. Typically lab members or general staff who may initiate orders.</p>
            break;
        case 4:
            // On Approver
            <p>Users who review and approve orders from requestors. Approvers must be added as requestors in order to submit orders. Approvers are typically the PI, supervsor of units, or their delegates.</p>
            break;
        case 5:
            //On Account Manager
            <p>Users who review orders following approval step. Typically admin staff or shared service unit budget personell.</p>
            break;
        case 6:
            //On Purchaser
            <p>User who completes order and files order with vendor or campus purchasing. Typcally admin staff or shared service unit purchasing personell.</p>
            break;
    }
    <p>You must add at least one requestor, approver, account manager, and purchaser for the workgroup to be fully functional.</p>
    <p>You may add users by any combination of the following methods:</p>
    <p>User(s) Selector: Enter Kerberos ID or email of desired person, one at a time. After entry, click search button. If a valid user is found, the users name will appear below the text entry field. Click this name to add the user to the list. Repeat for each user you wish to add this way. Users in the list may be removed via the small x to the right of the name.</p>
    <p>Paste email from any source. Non-email text is ignored, so "First Last &lt;user@ucdavis.edu&gt;" will work correctly. Any separater will work (space, comma, colon, etc).</p>
    <p>Paste Kerberos IDs from any source. Any non-alphnumeric character will work as separater. </p>
    <p>Any error finding users or duplicate warnings will be shown after submitting with the "next" button. If an error is found, valid entries will be still be added.</p>
    </div>
            <div class="section-text">
	
                <p>All required fields are in <strong>bold</strong> and have a red <span class="required">*</span> next to the field label.</p>
	
            </div>

            <ul>
               
                @if (Model.ErrorDetails.Any())
                {
                    <li>
                        <div class="editor-label">
                            @Html.Label("Errors")
                        </div>
                        <div class="editor-field">
                            <dl>
                                @foreach (var item in Model.ErrorDetails)
                                {
                                    <dt>@item.Key</dt>
                                    <dd>@item.Value</dd>
                                }
                            </dl>
                        </div>
                    </li>
                }
                    
                <li>
                    <div class="selector editor-label">
                        
                        <label style="font-weight: bold">Users(s):</label>
                                            
                    </div>
                    <div class="editor-field">

                        <select id="users" name="users" multiple="">
                            @if(Model.Users != null)
                            {
                                foreach(var a in Model.Users)
                                {
                                    <option selected="" value="@a.Id">@a.Name</option>
                                }
                            }
                        </select>
                        @Html.ValidationMessageFor(a => a.Users)
                    </div>
                </li>
                <li>
                    <div class="editor-label">
                        @Html.Label("Bulk Add By Email") 
                    </div>
                    <div class="editor-field">
                        @Html.TextArea("bulkEmail", null, new {@class="showTip", title="You may paste in list of emails from outlook or other source", style="width: 300px; height: 75px", placeholder = "Paste in list of emails from outlook or other source" })
                        @Html.ValidationMessage("bulkEmail")
                    </div>
                </li>
                <li>
                    <div class="editor-label">
                        @Html.Label("Bulk Add By Kerberos Id")
                    </div>
                    <div class="editor-field">
                        @Html.TextArea("bulkKerb", null, new { @class = "showTip", title = "You may paste in Kerberos Ids", style = "width: 300px; height: 75px", placeholder = "Paste in Kerberos Ids" })
                        @Html.ValidationMessage("bulkKerb")
                    </div>
                </li>
            </ul>

        </div>

        <footer></footer>

    </section>
    @Html.Partial("_Navigation")
}


